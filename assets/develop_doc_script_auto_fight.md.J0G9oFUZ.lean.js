import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.By2iWbs8.js";const e="/blue_archive_auto_script/assets/procedure_draft.DW7kGxwR.png",l="/blue_archive_auto_script/assets/total_assault_general.Db-O1sud.png",o="/blue_archive_auto_script/assets/boss_health.DqU66MEl.png",d="/blue_archive_auto_script/assets/student_skill.DYz8NAsw.png",h="/blue_archive_auto_script/assets/acc_auto_phase.wDZsOCDb.png",p="/blue_archive_auto_script/assets/current_cost.BjcX7Bxu.png",r="/blue_archive_auto_script/assets/fight_left_time.C0VOcm3d.png",k="/blue_archive_auto_script/assets/room_left_time.KUq3rtEg.png",c="/blue_archive_auto_script/assets/student_position.30e4DIIl.png",E="/blue_archive_auto_script/assets/enemy_position.CUEuOFM1.png",g="/blue_archive_auto_script/assets/screenshot_data_update_cycle.8xqj1ZsV.png",u="/blue_archive_auto_script/assets/condition_judgement.kigj1tON.png",f=JSON.parse('{"title":"自动战斗(Auto Fight)","description":"","frontmatter":{},"headers":[],"relativePath":"develop_doc/script/auto_fight.md","filePath":"develop_doc/script/auto_fight.md","lastUpdated":1747799112000}'),y={name:"develop_doc/script/auto_fight.md"};function F(q,s,_,C,m,b){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="自动战斗-auto-fight" tabindex="-1">自动战斗(Auto Fight) <a class="header-anchor" href="#自动战斗-auto-fight" aria-label="Permalink to &quot;自动战斗(Auto Fight)&quot;">​</a></h1><h2 id="简介-introduction" tabindex="-1">简介(Introduction) <a class="header-anchor" href="#简介-introduction" aria-label="Permalink to &quot;简介(Introduction)&quot;">​</a></h2><p>本文档记录了<strong>BAAS</strong>自动战斗的框架以及原理, 并会教学每一位普通的用户如何按照<strong>BAAS</strong>的自动战斗框架的规范书写自动战斗的轴文件,</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>如果你是C++小白,不用理解代码是如何书写的,重点关注轴文件的格式, 跟着本文的指导一步一步理解也可以写出正确的轴文件</strong></p></div><ul><li>首先明确一点, 这里的自动战斗并非指使用游戏内的auto让角色盲目的释放技能, 而是指<strong>BAAS</strong>通过截取战斗时的图像并提取其中的信息, 根据一个用户指定的<code>流程</code>在<code>恰当的条件</code>下<code>释放技能</code></li><li>这个流程简称为<code>轴</code>, <code>轴</code>是一个<code>json</code>格式的文件, 里面包含了自动战斗的所有信息</li><li>使用者可以根据需求与<strong>自动战斗规范</strong>书写<code>轴</code>文件, <strong>BAAS</strong>负责解析<code>轴</code>是否合法并运行合法的轴</li><li><strong>BAAS</strong>的自动战斗运作理念类似于编译原理中的<strong>有限状态自动机</strong></li></ul><h2 id="例子-example" tabindex="-1">例子(Example) <a class="header-anchor" href="#例子-example" aria-label="Permalink to &quot;例子(Example)&quot;">​</a></h2><p>以下图的简单流程作为自动战斗轴文件的书写例子, 当你理解了这个例子, 你就能完全理解<strong>BAAS</strong>自动战斗的工作原理, 以及轴文件该如何书写 <img src="'+e+'" alt="procedure_draft"></p><p>观察这个流程图, 我们可以发现:</p><ul><li><p>流程中存在以下条件<code>condition</code> (每一个箭头上的文字)</p><ol><li>血量 &gt; 500w</li><li>血量 &lt; 500w</li><li>血量 &gt; 0</li><li>血量 &lt; 0</li></ol></li><li><p>流程中存在以下动作<code>action</code></p><ol><li>释放技能1 (<code>release_skill_1</code>)</li><li>释放技能2 (<code>release_skill_2</code>)</li><li>重开 (<code>restart</code>)</li></ol></li><li><p>我们可以将流程拆分为以下状态<code>state</code></p><ol><li>自动战斗开始 (<code>start</code>) <ul><li>下一个状态 : 释放技能1</li></ul></li><li>释放技能1 (<code>release_skill_1</code>) <ul><li>动作 : 释放技能1</li><li>状态转移 : <ol><li>条件 : 血量 &gt; 500w | 下一个状态 : 重开</li><li>条件 : 血量 &lt; 500w | 下一个状态 : 释放技能2</li></ol></li></ul></li><li>释放技能2 (<code>release_skill_2</code>) <ul><li>动作 : 释放技能2</li><li>状态转移 : <ol><li>条件 : 血量 &gt; 0 | 下一个状态 : 重开</li><li>条件 : 血量 &lt; 0 | 下一个状态 : 结束</li></ol></li></ul></li><li>重开 (<code>restart</code>) <ul><li>动作 : 重开</li><li>下一个状态 : 释放技能1</li></ul></li><li>结束 (<code>end</code>)</li></ol></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>你或许会疑惑<code>state</code>中的释放技能1 / 释放技能2 / 重开 是不是与上面的<code>action</code>重复了, 这实际上是完全不同的概念, 状态名(<code>state</code>)是可以和动作(<code>action</code>)名相同的, 请注意区分同名的状态和动作</p></div><ul><li>根据以上例子, 你可能发现了, <strong>BAAS</strong>自动战斗轴文件本质上需要你完成三个内容: <ul><li><code>状态(state)</code> : 自动战斗在到达状态时执行动作, 并按照转移条件转移到下一个状态 <ul><li><a href="#状态书写规范">状态书写规范</a></li></ul></li><li><code>条件(condition)</code> : 状态转移的条件 <ul><li><a href="#条件书写规范">条件书写规范</a></li></ul></li><li><code>动作(action)</code> : 到达一个状态后立即执行的动作 <ul><li><a href="#动作action">动作书写规范</a></li></ul></li></ul></li></ul><h3 id="队伍配置" tabindex="-1">队伍配置 <a class="header-anchor" href="#队伍配置" aria-label="Permalink to &quot;队伍配置&quot;">​</a></h3><ul><li>通过规定角色练度确定是否可以使用这个轴 (可选)</li><li>选择初始技能</li></ul><h2 id="截图数据监测" tabindex="-1">截图数据监测 <a class="header-anchor" href="#截图数据监测" aria-label="Permalink to &quot;截图数据监测&quot;">​</a></h2><ul><li>相关代码见 <code>apps/BAAS/src/module/auto_fight/screenshot_data</code> 文件夹</li></ul><h3 id="可监测的数据" tabindex="-1">可监测的数据 <a class="header-anchor" href="#可监测的数据" aria-label="Permalink to &quot;可监测的数据&quot;">​</a></h3><p>以下图为例介绍在自动战斗中图像中可被提取的数据</p><ul><li><img src="'+l+'" alt="total_assault_general.png"></li></ul><ol><li>BOSS的最大血量 / 总血量 <a href="/blue_archive_auto_script/develop_doc/script/auto_fight_boss_health_update.html">Code</a><img src="'+o+'" alt="boss_health.png"></li><li>每个技能槽学生的技能名以及技能释费用 <a href="/blue_archive_auto_script/develop_doc/script/auto_fight_skill_update.html">Code</a><img src="'+d+'" alt="student_skill.png"></li><li>(倍速 <a href="/blue_archive_auto_script/develop_doc/script/auto_fight_acc_phase_update.html">Code</a>) / (自动 <a href="/blue_archive_auto_script/develop_doc/script/auto_fight_auto_state_update.html">Code</a>) 状态 <img src="'+h+'" alt="acc_auto_phase.png"></li><li>当前可用于释放技能的费用 <a href="/blue_archive_auto_script/develop_doc/script/auto_fight_cost_update.html">Code</a><img src="'+p+'" alt="current_cost.png"></li><li>战斗剩余时间 <img src="'+r+'" alt="fight_left_time.png"></li><li>房间剩余时间 <img src="'+k+'" alt="room_left_time.png"></li><li>学生位置坐标及 <img src="'+c+'" alt="student_position.png"></li><li>敌对角色的位置 <img src="'+E+'" alt="enemy_position.png"></li></ol><h3 id="数据记录类" tabindex="-1">数据记录类 <a class="header-anchor" href="#数据记录类" aria-label="Permalink to &quot;数据记录类&quot;">​</a></h3><p>screenshot_data_recorder 使用类来记录<a href="#可监测的数据">可监测的数据</a>中的数据, 以供<a href="#动作-action">动作(action)</a> 和 <a href="#条件-condition">条件(condition)</a>使用</p><h3 id="数据更新" tabindex="-1">数据更新 <a class="header-anchor" href="#数据更新" aria-label="Permalink to &quot;数据更新&quot;">​</a></h3><p>按照下图的架构实现自动战斗的数据更新 <img src="'+g+`" alt="screenshot_data_update_cycle.png"></p><ul><li><p>每个数据更新都对应一个类, 他们都继承自<a href="/blue_archive_auto_script/develop_doc/script/auto_fight_BaseDataUpdater.html"><code>class BaseDataUpdater</code></a> 类<code>screenshot_data</code> 中 <code>d_updater_mask</code> 用于指示一轮数据更新中哪些<code>update()</code> 函数需要被调用, 每一位对应一个数据更新类, 对应关系如下</p><table tabindex="0"><thead><tr><th>Bit</th><th>Updater</th></tr></thead><tbody><tr><td><code>1</code></td><td><code>CostUpdater</code></td></tr><tr><td><code>2</code></td><td><code>BossHealthUpdater</code></td></tr><tr><td><code>3</code></td><td><code>SkillNameUpdater</code></td></tr><tr><td><code>4</code></td><td><code>SkillCostUpdater</code></td></tr><tr><td><code>5</code></td><td><code>AccelerationPhaseUpdater</code></td></tr><tr><td><code>6</code></td><td><code>AutoStateUpdater</code></td></tr></tbody></table><p><strong>example</strong>: 当<code>d_updater_mask</code> 被设置为 <code>0b1101</code> 则表示 <code>CostUpdater</code> , <code>SkillNameUpdater</code> 和 <code>SkillCostUpdater</code> 的 <code>update()</code> 函数需要被调用</p></li><li><p>数据更新多线程并行进行, 线程数量由配置中的<code>/auto_fight/d_update_max_thread</code>字段决定</p></li><li><p>数据更新任务提交至线程池的顺序由每个<code>updater</code>重写的<a href="/blue_archive_auto_script/develop_doc/script/auto_fight_BaseDataUpdater.html#estimated-time-cost"><code>estimated_time_cost</code></a>决定, 按照更新耗时由小到大进行更新</p></li></ul><h2 id="基准测试-benchmark" tabindex="-1">基准测试(Benchmark) <a class="header-anchor" href="#基准测试-benchmark" aria-label="Permalink to &quot;基准测试(Benchmark)&quot;">​</a></h2><h3 id="模拟器截图-控制速度测试" tabindex="-1">模拟器截图/控制速度测试 <a class="header-anchor" href="#模拟器截图-控制速度测试" aria-label="Permalink to &quot;模拟器截图/控制速度测试&quot;">​</a></h3><p>截图/控制速度主要与模拟器 和 CPU 有关, 推荐使用<code>雷电</code>模拟器 / <code>MuMu</code>模拟器</p><table tabindex="0"><thead><tr><th>CPU / 模拟器</th><th><code>雷电</code></th><th><code>MuMu</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>0.8ms - 2.5ms</code> 平均<code>1.5ms</code></td><td><code>1.9ms - 3.4ms</code> 平均<code>2.5ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td>-</td><td><code>4.9ms - 8.2ms</code> 平均<code>7.1ms</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td>-</td><td><code>12.1ms - 21.3ms</code> 平均<code>15.3ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>1.7ms - 6.8ms</code> 平均<code>3.5ms</code></td><td><code>4.2ms - 8.7ms</code> 平均<code>5.9ms</code></td></tr></tbody></table><ul><li>以上截图方式分别为 <ul><li>雷电 : ldopengl</li><li>MuMu : nemu</li></ul></li></ul><table tabindex="0"><thead><tr><th>CPU + 控制模式 / 模拟器</th><th><code>MuMu</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code>+<code>adb</code></td><td><code>4.9ms</code> - <code>7.1ms</code> 平均<code>6.1ms</code></td></tr><tr><td><code>Amd Ryzen 9 9950x</code>+<code>nemu</code></td><td><code>40us</code> - <code>90us</code> 平均<code>50us</code></td></tr><tr><td><code>Amd Ryzen 9 9950x</code>+<code>scrcpy</code></td><td><code>5.2ms</code> - <code>5.9ms</code> 平均<code>5.5ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code>+<code>adb</code></td><td><code>12.5ms</code> - <code>14.7ms</code> 平均<code>13.3ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code>+<code>nemu</code></td><td><code>43us</code> - <code>87us</code> 平均<code>59us</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code>+<code>scrcpy</code></td><td><code>5.6ms</code> - <code>5.7ms</code> 平均<code>5.6ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code>+<code>adb</code></td><td><code>11.9ms</code> - <code>16.3ms</code> 平均<code>13ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code>+<code>nemu</code></td><td><code>50us</code> - <code>110us</code> 平均<code>70us</code></td></tr><tr><td><code>Intel Core i9-13900HX</code>+<code>scrcpy</code></td><td><code>5.3ms</code> - <code>6.4ms</code> 平均<code>5.6ms</code></td></tr></tbody></table><h3 id="数据更新速度测试" tabindex="-1">数据更新速度测试 <a class="header-anchor" href="#数据更新速度测试" aria-label="Permalink to &quot;数据更新速度测试&quot;">​</a></h3><ol><li><p><code>纯CPU</code>更新数据</p><table tabindex="0"><thead><tr><th>CPU / 数据</th><th><code>Cost</code></th><th><code>SkillName</code></th><th><code>ObjPos</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>3us - 9us</code><br>平均<code>6us</code></td><td><code>1.8ms - 2.1ms</code><br>平均<code>2ms</code></td><td><code>33.1ms - 39.5ms</code><br>平均<code>35ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>6us - 28us</code><br>平均<code>15us</code></td><td><code>3.1ms - 4.5ms</code><br>平均<code>3.5ms</code></td><td><code>79.1ms - 91.0ms</code><br>平均<code>86ms</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>6us - 53us</code><br>平均<code>20us</code></td><td><code>10.4ms - 14.9ms</code><br>平均<code>12.5ms</code></td><td><code>159.3ms - 222.5ms</code><br>平均<code>175.5ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>3us - 19us</code><br>平均<code>7us</code></td><td><code>1.9ms - 5.4ms</code><br>平均<code>3.6ms</code></td><td><code>70.1ms - 107.0ms</code><br>平均<code>90ms</code></td></tr></tbody></table><table tabindex="0"><thead><tr><th>CPU / 数据</th><th><code>BossHealth</code></th><th><code>SkillCost</code></th><th><code>Acc</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>5.0ms - 9.0ms</code><br>平均<code>7.8ms</code></td><td><code>1.6ms - 3ms</code><br>平均<code>1.8ms</code></td><td><code>6us - 24us</code><br>平均<code>13us</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>35.0ms - 50.0ms</code><br>平均<code>39ms</code></td><td><code>6.4ms - 8.4ms</code><br>平均<code>7.5ms</code></td><td><code>14us - 21us</code><br>平均<code>20us</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>52.0ms - 79.3ms</code><br>平均<code>65ms</code></td><td><code>16.0ms - 22.7ms</code><br>平均<code>20.2ms</code></td><td><code>25us - 36us</code><br>平均<code>30us</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>31.4ms - 90.1ms</code><br>平均<code>60ms</code></td><td><code>5.1ms - 18.9ms</code><br>平均<code>8.5ms</code></td><td><code>13us - 23us</code><br>平均<code>16us</code></td></tr></tbody></table><ul><li><strong>note</strong>: <code>SkillCost</code>指更新一个槽技能的时间, 三个槽时间需要 x 3</li></ul><table tabindex="0"><thead><tr><th>CPU / 数据</th><th><code>Auto</code></th></tr></thead><tbody><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>9us - 24us</code><br>平均<code>16us</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>16us - 22us</code><br> 平均<code>20us</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>27us - 43us</code><br>平均<code>30us</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>13us - 23us</code><br>平均<code>19us</code></td></tr></tbody></table></li><li><p>YOLO模型推理 : <code>CUDA加速</code>和<code>纯CPU</code>速度对比</p></li></ol><table tabindex="0"><thead><tr><th>设备 / 数据</th><th><code>ObjPos</code></th></tr></thead><tbody><tr><td><code>RTX 5090</code></td><td><code>9.1ms - 11.0ms</code> <br>平均<code>10.1ms</code></td></tr><tr><td><code>Amd Ryzen 9 9950x</code></td><td><code>33.1ms - 39.5ms</code> <br>平均<code>35ms</code></td></tr><tr><td><code>Amd Ryzen 6 6800H</code></td><td><code>79.1ms - 91.0ms</code> <br>平均<code>86ms</code></td></tr><tr><td><code>Intel Core i5-9300H</code></td><td><code>159.3ms - 222.5ms</code><br>平均<code>175.5ms</code></td></tr><tr><td><code>Intel Core i9-13900HX</code></td><td><code>70.1ms - 107.0ms</code><br>平均<code>90ms</code></td></tr></tbody></table><h2 id="状态-state" tabindex="-1">状态(State) <a class="header-anchor" href="#状态-state" aria-label="Permalink to &quot;状态(State)&quot;">​</a></h2><h3 id="状态书写规范" tabindex="-1">状态书写规范 <a class="header-anchor" href="#状态书写规范" aria-label="Permalink to &quot;状态书写规范&quot;">​</a></h3><p>每个状态由以下内容组成</p><ol><li><code>action</code>: 到达这个状态后立即执行的行为（如技能释放、开启auto/倍速等)</li><li><code>transitions</code>: <code>action</code>结束后的状态转移 <ul><li>每个状态转移转移包含以下参数 <ul><li><code>condition</code>: 状态转移的条件名</li><li><code>next</code>: 下一个状态名</li></ul></li></ul></li><li><code>default_transition</code>: 当<code>transitions</code>中的<strong>所有条件</strong>都不被满足时, 默认转移状态</li></ol><ul><li><strong>note</strong>:</li></ul><ol><li>初始状态：<code>start_state</code>字段指示</li><li>结束条件: 自动战斗会在<strong>没有任何可转移状态</strong>时退出循环</li><li>值得一提的是, 没有<code>default_transition</code>, 自动战斗也可以实现它的功能, 你只需要找到所有其他都不成立的条件, 并将其作为transition的最后一个条件也可以实现default_transition的功能</li></ol><p><strong>example</strong>: 以上述内容书写一个简介中简单流程图的状态机</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;start_state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state_release_skill_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;states&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;state_release_skill_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release_skill_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;transitions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;condition_boss_health_over_500w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state_restart&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default_transition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state_release_skill_2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;state_release_skill_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release_skill_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;transitions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;condition_boss_health_over_0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state_restart&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default_transition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;end&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;state_restart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;restart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default_transition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is end of script.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;conditions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;condition_boss_health_over_500w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Boss health &gt; 5_000_000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;condition_boss_health_over_0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Boss health &gt; 0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;actions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;release_skill_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;release_method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;slot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;goz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;release_skill_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;release_method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;slot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;goz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;restart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Restart The Game&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="动作-action" tabindex="-1">动作(Action) <a class="header-anchor" href="#动作-action" aria-label="Permalink to &quot;动作(Action)&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;on&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;turn on auto&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;solve_procedure&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;procedure_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fight_restart&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;acc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;skill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auto_release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C_decrease&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;skill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skill_n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fuuka (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fixed_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C_decrease&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;skill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skill_n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fixed_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C_decrease&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;skill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skill_n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Koharu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yolo_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;obj_n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Eimi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C_decrease&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;skill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;op&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last_rel_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;l_rel_idx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yolo_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;obj_n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C_decrease&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>释放技能有关的参数</p><h3 id="release-method" tabindex="-1">release_method <a class="header-anchor" href="#release-method" aria-label="Permalink to &quot;release_method&quot;">​</a></h3><ul><li><strong>description</strong>: 释放一个技能的方式</li><li><strong>type</strong>: <code>int</code></li><li><strong>constrains</strong>:</li><li><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>0</code></td><td>开启<code>auto</code>释放 (确保<code>auto</code>被选中)</td></tr><tr><td><code>1</code></td><td>自定义点击顺序</td></tr><tr><td><code>2</code></td><td>保证槽技能被选中--&gt;释放</td></tr></tbody></table></li></ul><p><strong>note</strong>: 方式 <code>2, 3</code> 需要设置<a href="#target"><code>target</code></a></p><h3 id="target" tabindex="-1">target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;target&quot;">​</a></h3><h4 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h4><ul><li><strong>description</strong>: 技能释放的目标类型</li><li><strong>type</strong>: <code>int</code></li><li><strong>constrains</strong>:</li><li><table tabindex="0"><thead><tr><th>值</th><th>含义</th><th>需要字段</th></tr></thead><tbody><tr><td><code>0</code></td><td>一个固定坐标</td><td><code>position</code></td></tr><tr><td><code>1</code></td><td>一个运行过程中生成的坐标</td><td><code>name</code></td></tr></tbody></table></li><li><strong>examples</strong>:</li></ul><ol><li><code>type</code> = 0<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><strong>explanation</strong>: 释放技能的固定坐标为(1180, 360)</li><li><code>type</code> = 1<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;goz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><strong>explanation</strong>: 释放技能位置在运行时生成, 为yolo检测出名为&quot;goz&quot;的坐标</li></ol><h3 id="check" tabindex="-1">check <a class="header-anchor" href="#check" aria-label="Permalink to &quot;check&quot;">​</a></h3><ul><li><p><strong>description</strong>: 检查技能释放的方式</p></li><li><p><strong>type</strong>: <code>int</code></p></li><li><p><strong>constrains</strong>:</p></li><li><table tabindex="0"><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>0</code></td><td>不作检测</td></tr><tr><td><code>1</code></td><td><code>cost</code>减少</td></tr><tr><td><code>2</code></td><td>技能槽图标消失</td></tr></tbody></table></li><li><p><strong>examples</strong>:</p></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;release_skill_Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;release_method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;slot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mika&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;goz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;decrease&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="条件-condition" tabindex="-1">条件(Condition) <a class="header-anchor" href="#条件-condition" aria-label="Permalink to &quot;条件(Condition)&quot;">​</a></h2><h3 id="条件类-condition-class" tabindex="-1">条件类(Condition Class) <a class="header-anchor" href="#条件类-condition-class" aria-label="Permalink to &quot;条件类(Condition Class)&quot;">​</a></h3><p>我们希望<a href="#可监测的数据">可监测的数据</a>满足一些条件时进行自动化操作, 条件类让我们能用一种规范的语言表达我们所需要的条件</p><ol><li>为了持续监测条件 <ul><li>在循环中依次执行 <code>截图 --&gt; 数据更新 --&gt; 条件判断</code></li><li>数据更新前, 遍历每个<code>condition</code>, 通过标志位指示需要被更新的数据</li><li>数据更新前, 首先判断界面是否为战斗中, 非战斗中则重新截图</li><li>数据更新前, 等待正在更新数据线程数为0 (防止同一数据更新同时进行)</li><li>由上一条可得, 如果<code>一条数据</code>不被当前<code>任意一个condition</code>所需要, 则不更新会该数据</li><li>当某一条件成立 / 所有条件不成立时结束判断</li></ul></li><li>单一状态信息更新后<strong>紧接着</strong>进行条件判断 <ul><li>条件判断的耗时远低于数据更新, 如果有多条数据同时在更新, 其中一条数据更新完毕后立即进行条件判断</li></ul></li><li>根据<a href="#可监测的数据">可监测的数据</a>中任意<strong>一个</strong>进行比较的条件称为<code>原始条件 (primitive condition)</code></li><li>条件可根据<code>or / and</code>进行自由组合, 称为<code>组合条件</code></li><li>每个条件包含<code>timeout</code>字段 <ul><li>条件判断开始后时限内期望条件未被判断为(未)成立则认为该条件不成立</li><li>设计<code>timeout</code>的一大原因是可以有效避免条件判断陷入死循环</li></ul></li><li>条件类仅在加载自动战斗工作流时初始化, 条件类可被重复使用, 每次使用<code>condition</code>前刷新上一次使用的数据</li><li><code>desc</code>字段作为这个条件的描述, 方便理解, 并不会对条件判断产生任何影响</li></ol><h3 id="条件判断-condition-judgement" tabindex="-1">条件判断 (Condition Judgement) <a class="header-anchor" href="#条件判断-condition-judgement" aria-label="Permalink to &quot;条件判断 (Condition Judgement)&quot;">​</a></h3><p>按照下图的架构实现自动战斗的条件判断, 该架构设计参照<a href="#条件类-condition-class">条件类</a>所需的特性 <img src="`+u+'" alt="condition_judgement.png"></p><h2 id="条件书写规范" tabindex="-1">条件书写规范 <a class="header-anchor" href="#条件书写规范" aria-label="Permalink to &quot;条件书写规范&quot;">​</a></h2><p><strong>BAAS</strong>根据以下规范识别<code>condition</code></p><ol><li>用户书写的所有<code>condition</code> 存放在</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;conditions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;condition_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }    </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="重开条件-restart-condition" tabindex="-1">重开条件(Restart Condition) <a class="header-anchor" href="#重开条件-restart-condition" aria-label="Permalink to &quot;重开条件(Restart Condition)&quot;">​</a></h2><p>重开是凹分必不可少的环节之一, 列举以下重开条件以供参考</p><h3 id="boss血量范围" tabindex="-1">BOSS血量范围 <a class="header-anchor" href="#boss血量范围" aria-label="Permalink to &quot;BOSS血量范围&quot;">​</a></h3><ul><li><strong>description</strong>: 检查BOSS血量是否在某一范围</li><li><strong>checkpoint</strong>: <ol><li>战斗剩余时间达到某值</li><li>释放技能后x秒</li></ol></li><li><strong>usage</strong>: <ol><li>技能未暴击</li><li>其他异常 (学生退场 / 寿司开盾减伤 / 黑白转阶段)</li></ol></li></ul><h3 id="boss血量减少" tabindex="-1">BOSS血量减少 <a class="header-anchor" href="#boss血量减少" aria-label="Permalink to &quot;BOSS血量减少&quot;">​</a></h3><ul><li><strong>description</strong>: 检查BOSS血量是否在某一时间段内下降期望值</li><li><strong>checkpoint</strong>: <ol><li>战斗剩余时间达到某值计时x秒</li><li>释放技能后计时x秒</li></ol></li></ul><h3 id="技能槽" tabindex="-1">技能槽 <a class="header-anchor" href="#技能槽" aria-label="Permalink to &quot;技能槽&quot;">​</a></h3><ul><li><strong>description</strong>:检查学生技能是否出现在技能槽</li><li><strong>checkpoint</strong>: <ol><li>战斗剩余时间达到某值计时x秒</li><li>释放技能后计时x秒</li></ol></li><li><strong>usage</strong>: <ol><li>检查初始技能顺序是否正确</li><li>学生退场 --&gt; 技能排序变化</li><li><code>auto</code>异常释放技能</li></ol></li></ul><h3 id="技能cost" tabindex="-1">技能Cost <a class="header-anchor" href="#技能cost" aria-label="Permalink to &quot;技能Cost&quot;">​</a></h3><ul><li><strong>description</strong>:检查技能Cost是否为指定值</li><li><strong>checkpoint</strong>: <ol><li>战斗剩余时间达到某值计时x秒</li><li>释放技能后计时x秒</li></ol></li><li><strong>usage</strong>: <ol><li>检查忧, 枫香(新年) 等减费角色的技能是否释放到期望目标</li></ol></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><table tabindex="0"><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>0</code></td><td>开启<code>auto</code>释放 (确保<code>auto</code>被选中)</td></tr><tr><td><code>1</code></td><td>自定义点击顺序</td></tr><tr><td><code>2</code></td><td>保证槽技能被选中--&gt;释放</td></tr></tbody></table><h2 id="使用前须知" tabindex="-1">使用前须知 <a class="header-anchor" href="#使用前须知" aria-label="Permalink to &quot;使用前须知&quot;">​</a></h2><h3 id="必要的游戏内设置" tabindex="-1">必要的游戏内设置 <a class="header-anchor" href="#必要的游戏内设置" aria-label="Permalink to &quot;必要的游戏内设置&quot;">​</a></h3><ol><li><strong>必须关闭游戏内释放技能动画</strong></li></ol><h2 id="轴的基本信息" tabindex="-1">轴的基本信息 <a class="header-anchor" href="#轴的基本信息" aria-label="Permalink to &quot;轴的基本信息&quot;">​</a></h2><h3 id="name-轴名称" tabindex="-1"><code>name</code> (轴名称) <a class="header-anchor" href="#name-轴名称" aria-label="Permalink to &quot;`name` (轴名称)&quot;">​</a></h3><ul><li><strong>description</strong>: 轴的名称</li><li><strong>type</strong>: <code>string</code></li><li><strong>example</strong>: 特殊委托关卡L, 使用女仆爱丽丝的通关轴</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Special-Task-L Aris Maid Workflow&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="formation-配队信息" tabindex="-1">formation (配队信息) <a class="header-anchor" href="#formation-配队信息" aria-label="Permalink to &quot;formation (配队信息)&quot;">​</a></h3><h3 id="完整组合" tabindex="-1">完整组合 <a class="header-anchor" href="#完整组合" aria-label="Permalink to &quot;完整组合&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Special-Task-L Aris Maid Workflow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;formation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;front&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Aris (Maid)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wakamo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kayoko (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;back&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ako&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Himari&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;initial_skills&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wakamo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ako&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Himari&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;all_appeared_skills&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Aris (Maid)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Wakamo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Kayoko (New Year)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Ako&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Himari&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;borrow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;battle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;boss_max_health&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">188796</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">224756</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">260729</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">287696</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;phase5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">323657</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="class-autofight" tabindex="-1"><code>Class AutoFight</code> <a class="header-anchor" href="#class-autofight" aria-label="Permalink to &quot;`Class AutoFight`&quot;">​</a></h1><ul><li><strong>description</strong>: 集成 condition / action / state 并最终执行自动战斗的类</li></ul><h2 id="成员变量-members" tabindex="-1">成员变量 (Members) <a class="header-anchor" href="#成员变量-members" aria-label="Permalink to &quot;成员变量 (Members)&quot;">​</a></h2><h3 id="config" tabindex="-1"><code>config</code> <a class="header-anchor" href="#config" aria-label="Permalink to &quot;`config`&quot;">​</a></h3><h3 id="logger" tabindex="-1"><code>logger</code> <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;`logger`&quot;">​</a></h3><h3 id="default-active-skill-template-default-inactive-skill-template" tabindex="-1"><code>default_active_skill_template</code> / <code>default_inactive_skill_template</code> <a class="header-anchor" href="#default-active-skill-template-default-inactive-skill-template" aria-label="Permalink to &quot;`default_active_skill_template` / `default_inactive_skill_template`&quot;">​</a></h3><h3 id="template-j-ptr-prefix" tabindex="-1"><code>template_j_ptr_prefix</code> <a class="header-anchor" href="#template-j-ptr-prefix" aria-label="Permalink to &quot;`template_j_ptr_prefix`&quot;">​</a></h3><h3 id="d-update-max-thread" tabindex="-1"><code>d_update_max_thread</code> <a class="header-anchor" href="#d-update-max-thread" aria-label="Permalink to &quot;`d_update_max_thread`&quot;">​</a></h3><p><strong>type</strong>: int <strong>description</strong>: 数据更新最大同时运行的线程数量 (线程池大小)</p><h2 id="d-update-thread-pool" tabindex="-1"><code>d_update_thread_pool</code> <a class="header-anchor" href="#d-update-thread-pool" aria-label="Permalink to &quot;`d_update_thread_pool`&quot;">​</a></h2><p><strong>type</strong>: <code>std::unique_ptr&lt;ThreadPool&gt;</code><strong>description</strong>: 数据更新使用的线程池</p><h2 id="d-update-thread-mutex" tabindex="-1"><code>d_update_thread_mutex</code> <a class="header-anchor" href="#d-update-thread-mutex" aria-label="Permalink to &quot;`d_update_thread_mutex`&quot;">​</a></h2><p><strong>type</strong>: <code>std::mutex</code><strong>description</strong>: 用于线程同步的互斥量</p><h2 id="d-updater-running-thread-count" tabindex="-1"><code>d_updater_running_thread_count</code> <a class="header-anchor" href="#d-updater-running-thread-count" aria-label="Permalink to &quot;`d_updater_running_thread_count`&quot;">​</a></h2><p><strong>type</strong>: <code>std::atomic&lt;int&gt;</code><strong>description</strong>: 当前正在运行的数据更新线程数量</p><h2 id="d-updater-thread-finish-notifier" tabindex="-1"><code>d_updater_thread_finish_notifier</code> <a class="header-anchor" href="#d-updater-thread-finish-notifier" aria-label="Permalink to &quot;`d_updater_thread_finish_notifier`&quot;">​</a></h2><p><strong>type</strong>: <code>std::condition_variable</code><strong>description</strong>: 用于通知数据更新线程结束的条件变量</p><h2 id="d-updaters" tabindex="-1"><code>d_updaters</code> <a class="header-anchor" href="#d-updaters" aria-label="Permalink to &quot;`d_updaters`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::unique_ptr&lt;BaseDataUpdater&gt;&gt;</code><strong>description</strong>: 指向所有数据更新类的指针集合</p><h2 id="d-wait-to-update-idx" tabindex="-1"><code>d_wait_to_update_idx</code> <a class="header-anchor" href="#d-wait-to-update-idx" aria-label="Permalink to &quot;`d_wait_to_update_idx`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;uint8_t&gt;</code><strong>description</strong>: 需要被执行的数据更新函数所对应的类在<a href="#d-updaters"><code>d_updaters</code></a>中的索引</p><h2 id="d-updater-queue" tabindex="-1"><code>d_updater_queue</code> <a class="header-anchor" href="#d-updater-queue" aria-label="Permalink to &quot;`d_updater_queue`&quot;">​</a></h2><p><strong>type</strong>: <code>std::queue&lt;uint8_t&gt;</code><strong>description</strong>: 根据数据更新的预估耗时排序后的<code>d_wait_to_update_idx</code>队列</p><h2 id="d-updater-map" tabindex="-1"><code>d_updater_map</code> <a class="header-anchor" href="#d-updater-map" aria-label="Permalink to &quot;`d_updater_map`&quot;">​</a></h2><p><strong>type</strong>: <code>std::map&lt;std::string, uint64_t&gt;</code><strong>description</strong>: 数据更新类的名称与偏移的映射</p><h2 id="d-auto-f" tabindex="-1"><code>d_auto_f</code> <a class="header-anchor" href="#d-auto-f" aria-label="Permalink to &quot;`d_auto_f`&quot;">​</a></h2><p><strong>type</strong>: <code>auto_fight_d</code><strong>description</strong>: 自动战斗的共享数据, 用于在 <code>action</code> / <code>condition</code> / <code>updaters</code> / <code>state</code> 之间传递数据</p><h2 id="cond-type" tabindex="-1"><code>_cond_type</code> <a class="header-anchor" href="#cond-type" aria-label="Permalink to &quot;`_cond_type`&quot;">​</a></h2><p><strong>type</strong>: <code>std::string</code><strong>description</strong>: 目前正在录入的条件的类型名称</p><h2 id="all-cond" tabindex="-1"><code>all_cond</code> <a class="header-anchor" href="#all-cond" aria-label="Permalink to &quot;`all_cond`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::unique_ptr&lt;BaseCondition&gt;&gt;</code><strong>description</strong>: 所有条件的指针集合</p><h2 id="cond-name-idx-map" tabindex="-1"><code>cond_name_idx_map</code> <a class="header-anchor" href="#cond-name-idx-map" aria-label="Permalink to &quot;`cond_name_idx_map`&quot;">​</a></h2><p><strong>type</strong>: <code>std::map&lt;std::string, uint64_t&gt;</code><strong>description</strong>: 条件名与<a href="#all-cond"><code>all_cond</code></a>中位置的映射 <strong>note</strong>:</p><ol><li>请注意<strong>条件名</strong>与<strong>条件类型名</strong>是完全不同的概念</li></ol><h2 id="cond-is-matched-recorder" tabindex="-1"><code>_cond_is_matched_recorder</code> <a class="header-anchor" href="#cond-is-matched-recorder" aria-label="Permalink to &quot;`_cond_is_matched_recorder`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;bool&gt;</code><strong>description</strong>: 记录条件是否成立, 已被判断成立 / 不成立的条件不会参与以下内容</p><ol><li>超时检查</li><li>条件成立判断</li></ol><p><strong>note</strong>:</p><ol><li>长度与<a href="#all-cond"><code>all_cond</code></a>相同</li></ol><h2 id="cond-checked" tabindex="-1"><code>_cond_checked</code> <a class="header-anchor" href="#cond-checked" aria-label="Permalink to &quot;`_cond_checked`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;bool&gt;</code><strong>description</strong>: 条件的 超时监测 / 重置状态 / 成立判断 是递归进行的, 记录每一项检查过的条件, 避免无限递归 <strong>note</strong>:</p><ol><li>长度与<a href="#all-cond"><code>all_cond</code></a>相同</li></ol><h2 id="all-state" tabindex="-1"><code>all_state</code> <a class="header-anchor" href="#all-state" aria-label="Permalink to &quot;`all_state`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;state_info&gt;</code><strong>description</strong>: 所有状态集合</p><h2 id="state-trans-name-recorder" tabindex="-1"><code>_state_trans_name_recorder</code> <a class="header-anchor" href="#state-trans-name-recorder" aria-label="Permalink to &quot;`_state_trans_name_recorder`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::vector&lt;std::string&gt;&gt;</code><strong>description</strong>: 每个state可能有多个状态转移, 记录每个状态的每个状态转移的下一个状态名 <strong>note</strong>: 当一个状态初始化时, 可能它的目标状态未初始化, 此时不知道该状态的索引, 该变量记录所有转移的下一个状态名, 以便再次遍历更新索引</p><h2 id="state-default-trans-name-recorder" tabindex="-1"><code>_state_default_trans_name_recorder</code> <a class="header-anchor" href="#state-default-trans-name-recorder" aria-label="Permalink to &quot;`_state_default_trans_name_recorder`&quot;">​</a></h2><p><strong>type</strong>: <code>std::vector&lt;std::optional&lt;std::string&gt;&gt;</code><strong>description</strong>: 作用同<a href="#state-trans-name-recorder"><code>_state_trans_name_recorder</code></a>, 使用<code>optional</code>原因为<code>state</code>允许没有默认转移</p><h2 id="state-name-idx-map" tabindex="-1"><code>state_name_idx_map</code> <a class="header-anchor" href="#state-name-idx-map" aria-label="Permalink to &quot;`state_name_idx_map`&quot;">​</a></h2><p><strong>type</strong>: <code>std::map&lt;std::string, uint64_t&gt;</code><strong>description</strong>: 状态名与<a href="#all-state"><code>all_state</code></a>中位置的映射</p><h2 id="curr-state-idx" tabindex="-1"><code>_curr_state_idx</code> <a class="header-anchor" href="#curr-state-idx" aria-label="Permalink to &quot;`_curr_state_idx`&quot;">​</a></h2><p><strong>type</strong>: <code>uint64_t</code><strong>description</strong>: 当前状态的索引</p><h2 id="state-cond-j-start-t" tabindex="-1"><code>_state_cond_j_start_t</code> <a class="header-anchor" href="#state-cond-j-start-t" aria-label="Permalink to &quot;`_state_cond_j_start_t`&quot;">​</a></h2><p><strong>type</strong>: <code>long long</code><strong>description</strong>: 状态转移 条件判断循环的开始时间(ms)</p><h2 id="state-cond-j-loop-start-t" tabindex="-1"><code>_state_cond_j_loop_start_t</code> <a class="header-anchor" href="#state-cond-j-loop-start-t" aria-label="Permalink to &quot;`_state_cond_j_loop_start_t`&quot;">​</a></h2><p><strong>type</strong>: <code>long long</code><strong>description</strong>: 状态转移 条件判断循环每一轮循环的开始时间(ms)</p><h2 id="state-cond-j-elapsed-t" tabindex="-1"><code>_state_cond_j_elapsed_t</code> <a class="header-anchor" href="#state-cond-j-elapsed-t" aria-label="Permalink to &quot;`_state_cond_j_elapsed_t`&quot;">​</a></h2><p><strong>type</strong>: <code>long long</code><strong>description</strong>: 状态转移 条件判断循环的总耗时(ms)</p><h2 id="state-trans-cond-matched-idx" tabindex="-1"><code>_state_trans_cond_matched_idx</code> <a class="header-anchor" href="#state-trans-cond-matched-idx" aria-label="Permalink to &quot;`_state_trans_cond_matched_idx`&quot;">​</a></h2><p><strong>type</strong>: <code>std::optional&lt;uint64_t&gt;</code><strong>description</strong>: 第一个状态转移条件成立的转移索引</p><h2 id="state-flg-all-trans-cond-dissatisfied" tabindex="-1"><code>_state_flg_all_trans_cond_dissatisfied</code> <a class="header-anchor" href="#state-flg-all-trans-cond-dissatisfied" aria-label="Permalink to &quot;`_state_flg_all_trans_cond_dissatisfied`&quot;">​</a></h2><p><strong>type</strong>: <code>bool</code><strong>description</strong>: 指示是否所有状态转移条件都不成立</p><h2 id="state-cond-j-loop-running-flg" tabindex="-1"><code>_state_cond_j_loop_running_flg</code> <a class="header-anchor" href="#state-cond-j-loop-running-flg" aria-label="Permalink to &quot;`_state_cond_j_loop_running_flg`&quot;">​</a></h2><p><strong>type</strong>: <code>bool</code><strong>description</strong>: 指示条件判断循环是否正在运行</p><h2 id="start-state-name" tabindex="-1"><code>start_state_name</code> <a class="header-anchor" href="#start-state-name" aria-label="Permalink to &quot;`start_state_name`&quot;">​</a></h2><p><strong>type</strong>: <code>std::string</code><strong>description</strong>: 初始状态的名称</p><h2 id="workflow-path" tabindex="-1"><code>workflow_path</code> <a class="header-anchor" href="#workflow-path" aria-label="Permalink to &quot;`workflow_path`&quot;">​</a></h2><p><strong>type</strong>: <code>std::filesystem::path</code><strong>description</strong>: 轴文件的路径</p><h2 id="workflow-name" tabindex="-1"><code>workflow_name</code> <a class="header-anchor" href="#workflow-name" aria-label="Permalink to &quot;`workflow_name`&quot;">​</a></h2><p><strong>type</strong>: <code>std::string</code><strong>description</strong>: 轴的名称</p><h2 id="baas" tabindex="-1"><code>baas</code> <a class="header-anchor" href="#baas" aria-label="Permalink to &quot;`baas`&quot;">​</a></h2><p><strong>type</strong>: <code>BAAS*</code><strong>description</strong>: <code>BAAS</code>实例</p>',158)]))}const x=i(y,[["render",F]]);export{f as __pageData,x as default};
